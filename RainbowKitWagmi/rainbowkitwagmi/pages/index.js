import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { ConnectButton } from '@rainbow-me/rainbowkit';
import Contract from '../../backend/artifacts/contracts/SimpleStorage.sol/SimpleStorage'
import { useAccount, useProvider, useSigner } from 'wagmi'
import { Text, Input, Button, useToast } from '@chakra-ui/react';
import { useState, useEffect } from 'react';
import { ethers } from 'ethers';

export default function Home() {

  const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  const { address, isConnected } = useAccount()
  const provider = useProvider()
  const { data: signer } = useSigner()
  const toast = useToast()

  //STATES INPUT
  const [number, setNumber] = useState(null)
  //STATES GET SC
  const [getNumber, setGetNumber] = useState(null)

  useEffect(() => {
    if(isConnected) {
      getDatas()
    }
  }, [isConnected])

  const getDatas = async() => {
    const contract = new ethers.Contract(contractAddress, Contract.abi, provider)
    const favoriteNumber = await contract.getNumber()
    setGetNumber(favoriteNumber.toString())
  }

  const setFavoriteNumber = async() => {
    try {
      const contract = new ethers.Contract(contractAddress, Contract.abi, signer)
      let transaction = await contract.setNumber(number)
      await transaction.wait() //= wait(1) même chose
      getDatas()
      toast({
        title: 'Congratulations!',
        description: "Your favorite number is in the blockchain",
        status: 'success',
        duration: 9000,
        isClosable: true,
      })
    }
    catch {
      toast({
        title: 'Error',
        description: "An error occured, please try again...",
        status: 'error',
        duration: 9000,
        isClosable: true,
      })
    }
    
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ConnectButton />
      {isConnected ? (
        <>
          <Text>Vous êtes bien connecté ! {address}</Text>
          <Text>Favorite Number : {getNumber}</Text>
          <Input placeholder="Your favorite Number" onChange={(e) => setNumber(e.target.value)} />
          <Button onClick={() => setFavoriteNumber()}>Set Favorite Number</Button>
        </>
      ) : (
        <Text>Merci de vous connecter !!! :(</Text>
      )}
    </>
  )
}
