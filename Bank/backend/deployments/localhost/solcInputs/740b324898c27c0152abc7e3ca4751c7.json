{
  "language": "Solidity",
  "sources": {
    "contracts/Bank.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nerror Bank__NotEnoughFundsProvided();\r\nerror Bank__NotEnoughEthersOnTheSC();\r\nerror Bank__WithdrawFailed();\r\n\r\n/// @title A simple wallet contract\r\n/// @author Ben BK\r\n/// @notice Allows to send and withdraw Ethers from a smart contract\r\n\r\ncontract Bank {\r\n\r\n    mapping(address => uint) balances;\r\n\r\n    /// @notice Allows to send Ethers to the smart contract\r\n    function sendEthers() external payable {\r\n        if(msg.value < 1 wei) {\r\n            revert Bank__NotEnoughFundsProvided();\r\n        }\r\n        balances[msg.sender] += msg.value;\r\n    }\r\n\r\n    /// @notice Allows to withdraw Ethers from the smart contract\r\n    /// @param _amount The amount to withdraw\r\n    function withdraw(uint _amount) external {\r\n        if(_amount > balances[msg.sender]) {\r\n            revert Bank__NotEnoughEthersOnTheSC();\r\n        }\r\n        balances[msg.sender] -= _amount;\r\n        (bool received, ) = msg.sender.call{value: _amount}(\"\");\r\n        if(!received) {\r\n            revert Bank__WithdrawFailed();\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}